{"version":3,"sources":["data/PersistentStorage.js","actions/index.js","components/MidiControls.jsx","components/PadButton.jsx","components/GridButton.jsx","components/MidiPads.jsx","components/ButtonColorSelect.jsx","components/PadButtonEditBox.jsx","components/App.jsx","reducers/pads.js","reducers/audioSource.js","reducers/volume.js","reducers/padButtonEdit.js","index.js","reducers/index.js","store.js"],"names":["_","require","VOLUME_KEY","PAD_MAPPINGS_KEY","DEFAULT_PAD_MAPPINGS","cloneDeep","padMappings","PersistentStorage","volume","JSON","parse","localStorage","getItem","setItem","stringify","loadVolume","CHANGE_VOLUME","OPEN_BUTTON_EDIT_SIDEBAR","CLOSE_BUTTON_EDIT_SIDEBAR","closeButtonEditSidebar","type","CHANGE_BUTTON_COLOR","CHANGE_BUTTON_SOUND","RESET_ALL","classnames","Handle","Slider","MidiControls","props","handleVolumeChange","bind","handleResetAll","values","value","dragging","index","restProps","this","dispatchChangeVolume","prefixCls","overlay","visible","placement","dispatchResetAll","dispatchCloseButtonEditSidebar","window","confirm","iconClassStr","icon","id","className","min","max","defaultValue","Math","round","handle","trackStyle","backgroundColor","handleStyle","borderColor","onClick","href","title","style","fontWeight","Component","connect","state","dispatch","payload","changeVolume","Mousetrap","PadButton","PadButtonContextMenu","contextMenuId","fontSize","lineHeight","disabled","srcName","shortcutKey","edit","isActive","isKeyPressed","buttonRef","React","createRef","idx","handleContextMenu","bindShortcutKey","unbindShortcutKey","e","preventDefault","contextMenu","show","event","current","click","setState","setTimeout","unbind","play","color","isEditing","classStrObj","active","classStr","substring","indexOf","onContextMenu","ref","onMouseDown","onHold","onMouseOver","onMouseUp","MidiPads","audios","playSound","openEditSidebar","loadSounds","pads","audioSource","map","item","Audio","btnIdx","audio","ended","pause","currentTime","dispatchOpenButtonEditSidebar","padButtonEdit","clonedState","clone","i","length","src","openButtonEditSidebar","colorOptions","label","dot","alignItems","display","borderRadius","content","marginRight","height","width","colorStyles","control","styles","option","data","isDisabled","isFocused","isSelected","chroma","alpha","css","contrast","cursor","input","placeholder","singleValue","indicatorSeparator","dropdownIndicator","ButtonColorSelect","handleChange","selectedOption","changeButtonColor","revert","originalColor","animation","duration","animateFill","hideOnClick","position","theme","find","c","onChange","options","PadButtonEditBox","handleAudioSrcSelect","revertAudioSrc","close","newColor","dispatchChangeButtonColor","dispatchChangeButtonSound","audioSrcData","originalSrcName","Object","keys","k","itemClassStr","selected","changeButtonSound","App","isEditMode","CSSTransition","in","timeout","classNames","unmountOnExit","initialState","loadPadMappings","originalState","action","currentVolume","currentPads","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","previousVolume","getState","console","log","previousPads","saveVolume","savePadMappings","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.47fb853a.chunk.js","sourcesContent":["import padMappings from \"../data/pad-mappings\";\n\nconst _ = require(\"lodash\");\n\nconst VOLUME_KEY = \"volume\";\nconst PAD_MAPPINGS_KEY = \"padMappings\";\n\nconst DEFAULT_VOLUME = 0.8;\nconst DEFAULT_PAD_MAPPINGS = _.cloneDeep(padMappings);\n\nexport default class PersistentStorage {\n  static loadVolume() {\n    let volume = JSON.parse(localStorage.getItem(VOLUME_KEY));\n\n    volume = volume === null ? DEFAULT_VOLUME : volume;\n\n    return volume;\n  }\n\n  static saveVolume(volume) {\n    localStorage.setItem(VOLUME_KEY, JSON.stringify(volume));\n  }\n\n  static loadPadMappings() {\n    let padMappings = localStorage.getItem(PAD_MAPPINGS_KEY);\n\n    padMappings =\n      padMappings === null ? DEFAULT_PAD_MAPPINGS : JSON.parse(padMappings);\n\n    return padMappings;\n  }\n\n  static savePadMappings(padMappings) {\n    localStorage.setItem(PAD_MAPPINGS_KEY, JSON.stringify(padMappings));\n  }\n}\n\nPersistentStorage.loadVolume();\n","export const CHANGE_VOLUME = \"CHANGE_VOLUME\";\n\nexport const changeVolume = volume => ({\n  type: CHANGE_VOLUME,\n  payload: {\n    volume\n  }\n});\n\nexport const OPEN_BUTTON_EDIT_SIDEBAR = \"OPEN_BUTTON_EDIT_SIDEBAR\";\n\nexport const openButtonEditSidebar = (btnIdx, color, srcName) => ({\n  type: OPEN_BUTTON_EDIT_SIDEBAR,\n  payload: {\n    btnIdx,\n    color,\n    srcName\n  }\n});\n\nexport const CLOSE_BUTTON_EDIT_SIDEBAR = \"CLOSE_BUTTON_EDIT_SIDEBAR\";\n\nexport const closeButtonEditSidebar = () => ({\n  type: CLOSE_BUTTON_EDIT_SIDEBAR\n});\n\nexport const CHANGE_BUTTON_COLOR = \"CHANGE_BUTTON_COLOR\";\n\nexport const changeButtonColor = (btnIdx, color) => ({\n  type: CHANGE_BUTTON_COLOR,\n  payload: {\n    btnIdx,\n    color\n  }\n});\n\nexport const CHANGE_BUTTON_SOUND = \"CHANGE_BUTTON_SOUND\";\n\nexport const changeButtonSound = (btnIdx, srcName) => ({\n  type: CHANGE_BUTTON_SOUND,\n  payload: {\n    btnIdx,\n    srcName\n  }\n});\n\nexport const RESET_ALL = \"RESET_ALL\";\n\nexport const resetAll = () => ({\n  type: RESET_ALL\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"rc-slider/assets/index.css\";\nimport \"rc-tooltip/assets/bootstrap.css\";\nimport Tooltip from \"rc-tooltip\";\nimport Slider from \"rc-slider\";\n\nimport { changeVolume, resetAll, closeButtonEditSidebar } from \"../actions\";\n\nconst classnames = require(\"classnames\");\n\nconst Handle = Slider.Handle;\n\nclass MidiControls extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n    this.handleResetAll = this.handleResetAll.bind(this);\n  }\n\n  handleVolumeChange(values) {\n    const { value, dragging, index, ...restProps } = values;\n\n    this.props.dispatchChangeVolume(value / 100);\n\n    return (\n      <Tooltip\n        prefixCls=\"rc-slider-tooltip\"\n        overlay={value}\n        visible={dragging}\n        placement=\"bottom\"\n        key={index}\n      >\n        <Handle value={value} {...restProps} />\n      </Tooltip>\n    );\n  }\n\n  handleResetAll() {\n    const { dispatchResetAll, dispatchCloseButtonEditSidebar } = this.props;\n\n    if (window.confirm(\"Reset all button options?\")) {\n      dispatchResetAll();\n      dispatchCloseButtonEditSidebar();\n    }\n  }\n\n  render() {\n    const { volume } = this.props;\n\n    const iconClassStr = classnames({\n      icon: true,\n      \"ion-md-volume-off\": volume === 0,\n      \"ion-md-volume-mute\": volume > 0 && volume < 0.3,\n      \"ion-md-volume-low\": volume >= 0.3 && volume < 0.6,\n      \"ion-md-volume-high\": volume >= 0.6\n    });\n\n    return (\n      <div id=\"midi-controls-wrapper\">\n        <div id=\"volume-control\" className=\"control-section\">\n          <div className=\"icon-wrapper\">\n            <i className={iconClassStr} />\n          </div>\n          <Slider\n            min={0}\n            max={100}\n            defaultValue={Math.round(volume * 100)}\n            handle={this.handleVolumeChange}\n            trackStyle={{\n              backgroundColor: \"#01c6bd\"\n            }}\n            handleStyle={{\n              borderColor: \"#01c6bd\"\n            }}\n          />\n        </div>\n\n        <div id=\"help-box-wrapper\">\n          <i id=\"help-icon\" className=\"icon ion-md-help-circle\" />\n\n          <div id=\"help-box\">\n            <div className=\"help-item\">\n              <h4>Changing Sound/Color</h4>\n              <p>Right click on a button to change its sound or color.</p>\n\n              <span\n                id=\"reset-all-button\"\n                className=\"button\"\n                onClick={this.handleResetAll}\n              >\n                <i className=\"icon ion-ios-refresh\" />\n                Reset to Default\n              </span>\n            </div>\n            <div className=\"help-item\">\n              <h4>Playing with a Keyboard</h4>\n              <p>The letters on each button is the keyboard shortcut.</p>\n            </div>\n\n            <a\n              className=\"button\"\n              href=\"http://99sounds.org/drum-samples/\"\n              title=\"99Sounds Drum Samples\"\n            >\n              <i className=\"icon ion-md-heart\" />\n              Audio files from{\" \"}\n              <span style={{ fontWeight: \"500\" }}>99Sounds Drum Samples</span>\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  volume: state.volume\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchChangeVolume: volume => dispatch(changeVolume(volume)),\n  dispatchResetAll: () => dispatch(resetAll()),\n  dispatchCloseButtonEditSidebar: () => dispatch(closeButtonEditSidebar())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MidiControls);\n","import React, { Component } from \"react\";\nimport { Menu, Item, contextMenu } from \"react-contexify\";\nimport \"react-contexify/dist/ReactContexify.min.css\";\nconst Mousetrap = require(\"mousetrap\");\nconst classnames = require(\"classnames\");\n\nclass GridButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isActive: false\n    };\n\n    this.isKeyPressed = false;\n    this.buttonRef = React.createRef();\n    this.contextMenuId = \"context_menu_\" + props.idx;\n\n    this.handleContextMenu = this.handleContextMenu.bind(this);\n    this.bindShortcutKey = this.bindShortcutKey.bind(this);\n    this.unbindShortcutKey = this.unbindShortcutKey.bind(this);\n  }\n\n  componentDidMount() {\n    this.bindShortcutKey();\n  }\n\n  componentWillUnmount() {\n    this.unbindShortcutKey();\n  }\n\n  GridButtonContextMenu = () => (\n    <Menu\n      id={this.contextMenuId}\n      style={{ fontSize: \"14px\", lineHeight: \"1.4\" }}\n    >\n      <Item disabled>\n        {this.props.srcName} / {this.props.shortcutKey}\n      </Item>\n      <Item onClick={() => this.props.edit()}>Change Sound or Color</Item>\n    </Menu>\n  );\n\n  handleContextMenu(e) {\n    e.preventDefault();\n    contextMenu.show({\n      id: this.contextMenuId,\n      event: e,\n      props: {}\n    });\n  }\n\n  bindShortcutKey() {\n    const { shortcutKey } = this.props;\n\n    Mousetrap.bind(shortcutKey, e => {\n      e.preventDefault();\n\n      if (this.isKeyPressed) {\n        return;\n      }\n\n      this.buttonRef.current.click();\n\n      this.setState({\n        isActive: true\n      });\n      this.isKeyPressed = true;\n\n      setTimeout(() => {\n        this.setState({\n          isActive: false\n        });\n      }, 100);\n    });\n\n    // Prevent auto-repeat keyboard events\n    Mousetrap.bind(\n      shortcutKey,\n      e => {\n        e.preventDefault();\n\n        this.isKeyPressed = false;\n      },\n      \"keyup\"\n    );\n  }\n\n  unbindShortcutKey() {\n    const { shortcutKey } = this.props;\n\n    Mousetrap.unbind(shortcutKey);\n  }\n\n  render() {\n    const { srcName, shortcutKey, color, play, isEditing } = this.props;\n\n    const colorClassStr = \"pad-button \" + color;\n    const classStrObj = {\n      active: this.state.isActive\n    };\n\n    classStrObj[colorClassStr] = true;\n\n    const displayStr = srcName.substring(0, srcName.indexOf(\" \"));\n    const classStr = classnames(classStrObj);\n    \n    return (\n      <div\n        onContextMenu={this.handleContextMenu}\n        className=\"pad-button-context-area\"\n      >\n        <div className={classStr} ref={this.buttonRef} \n\n\t\tonMouseDown={(e) => { window.onHold = true; return play(e); }}\n\t\tonMouseOver={(e) => { return (window.onHold === true) ? play(e) : false; }}\n                onMouseUp={(e) => { window.onHold = false; return false; }}\n\t>\n          <span className=\"text-display\">\n            {displayStr + \" / \" + shortcutKey}\n          </span>\n\n          {isEditing && (\n            <div className=\"edit-mode-indicator\">\n              <span>Editing</span>\n              <i className=\"icon ion-md-arrow-forward\" />\n            </div>\n          )}\n        </div>\n\n        <this.GridButtonContextMenu />\n      </div>\n    );\n  }\n}\n\nexport default GridButton;\n","import React, { Component } from \"react\";\nimport { Menu, Item, contextMenu } from \"react-contexify\";\nimport \"react-contexify/dist/ReactContexify.min.css\";\nconst Mousetrap = require(\"mousetrap\");\nconst classnames = require(\"classnames\");\n\nclass PadButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isActive: false\n    };\n\n    this.isKeyPressed = false;\n    this.buttonRef = React.createRef();\n    this.contextMenuId = \"context_menu_\" + props.idx;\n\n    this.handleContextMenu = this.handleContextMenu.bind(this);\n    this.bindShortcutKey = this.bindShortcutKey.bind(this);\n    this.unbindShortcutKey = this.unbindShortcutKey.bind(this);\n  }\n\n  componentDidMount() {\n    this.bindShortcutKey();\n  }\n\n  componentWillUnmount() {\n    this.unbindShortcutKey();\n  }\n\n  PadButtonContextMenu = () => (\n    <Menu\n      id={this.contextMenuId}\n      style={{ fontSize: \"14px\", lineHeight: \"1.4\" }}\n    >\n      <Item disabled>\n        {this.props.srcName} / {this.props.shortcutKey}\n      </Item>\n      <Item onClick={() => this.props.edit()}>Change Sound or Color</Item>\n    </Menu>\n  );\n\n  handleContextMenu(e) {\n    e.preventDefault();\n    contextMenu.show({\n      id: this.contextMenuId,\n      event: e,\n      props: {}\n    });\n  }\n\n  bindShortcutKey() {\n    const { shortcutKey } = this.props;\n\n    Mousetrap.bind(shortcutKey, e => {\n      e.preventDefault();\n\n      if (this.isKeyPressed) {\n        return;\n      }\n\n      this.buttonRef.current.click();\n\n      this.setState({\n        isActive: true\n      });\n      this.isKeyPressed = true;\n\n      setTimeout(() => {\n        this.setState({\n          isActive: false\n        });\n      }, 100);\n    });\n\n    // Prevent auto-repeat keyboard events\n    Mousetrap.bind(\n      shortcutKey,\n      e => {\n        e.preventDefault();\n\n        this.isKeyPressed = false;\n      },\n      \"keyup\"\n    );\n  }\n\n  unbindShortcutKey() {\n    const { shortcutKey } = this.props;\n\n    Mousetrap.unbind(shortcutKey);\n  }\n\n  render() {\n    const { srcName, shortcutKey, color, play, isEditing } = this.props;\n\n    const colorClassStr = \"pad-button \" + '';\n    const classStrObj = {\n      active: this.state.isActive\n    };\n\n    classStrObj[colorClassStr] = true;\n\n    const displayStr = srcName.substring(0, srcName.indexOf(\" \"));\n    const classStr = classnames(classStrObj);\n    \n    return (\n      <div\n        onContextMenu={this.handleContextMenu}\n        className=\"pad-button-context-area\"\n      >\n        <div className={classStr} ref={this.buttonRef} \n\n\t\tonMouseDown={(e) => { window.onHold = true; return play(e); }}\n\t\tonMouseOver={(e) => { return (window.onHold === true) ? play(e) : false; }}\n                onMouseUp={(e) => { window.onHold = false; return false; }}\n\t>\n          <span className=\"text-display\">\n          </span>\n\n          {isEditing && (\n            <div className=\"edit-mode-indicator\">\n              <span>Editing</span>\n              <i className=\"icon ion-md-arrow-forward\" />\n            </div>\n          )}\n        </div>\n\n        <this.PadButtonContextMenu />\n      </div>\n    );\n  }\n}\n\nexport default PadButton;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { openButtonEditSidebar } from \"../actions\";\nimport PadButton from \"./PadButton\";\nimport GridButton from \"./GridButton\";\n\nimport \"../stylesheets/midi-buttons.scss\";\nconst _ = require(\"lodash\");\n\nclass MidiPads extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      audios: []\n    };\n\n    this.playSound = this.playSound.bind(this);\n    this.openEditSidebar = this.openEditSidebar.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadSounds();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { pads, audioSource } = props;\n    const clonedState = _.clone(state);\n\n    for (let i = 0; i < state.audios.length; i++) {\n      if (audioSource[pads[i].srcName] !== state.audios[i].src) {\n        clonedState.audios[i] = new Audio(audioSource[pads[i].srcName]);\n      }\n    }\n\n    return clonedState;\n  }\n\n  loadSounds() {\n    const { pads, audioSource } = this.props;\n\n    this.setState({\n      audios: pads.map(item => new Audio(audioSource[item.srcName]))\n    });\n  }\n\n  playSound(btnIdx) {\n    const audio = this.state.audios[btnIdx];\n\n    if (!audio.ended) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n\n    audio.volume = this.props.volume;\n\n    audio.play();\n  }\n\n  openEditSidebar(btnIdx) {\n    const { pads, dispatchOpenButtonEditSidebar } = this.props;\n\n    dispatchOpenButtonEditSidebar(\n      btnIdx,\n      pads[btnIdx].color,\n      pads[btnIdx].srcName\n    );\n  }\n\n  render() {\n    const { pads, padButtonEdit } = this.props;\n\n    return (\n      <div id=\"pad-buttons-wrapper\" onMouseUp={() => { this.onHold = false;}}>\n        {pads.map((item, idx) => {\n          return (\n            <GridButton\n              key={idx}\n              idx={idx}\n              srcName={item.srcName}\n              shortcutKey={item.shortcutKey}\n              color={item.color}\n              isEditing={padButtonEdit && padButtonEdit.btnIdx === idx}\n              play={() => this.playSound(idx)}\n              edit={() => this.openEditSidebar(idx)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  audioSource: state.audioSource,\n  pads: state.pads,\n  padButtonEdit: state.padButtonEdit,\n  volume: state.volume\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchOpenButtonEditSidebar: (btnIdx, color, srcName) =>\n    dispatch(openButtonEditSidebar(btnIdx, color, srcName))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MidiPads);\n","import React, { Component } from \"react\";\nimport chroma from \"chroma-js\";\nimport Select from \"react-select\";\nimport { Tooltip } from \"react-tippy\";\nimport \"react-tippy/dist/tippy.css\";\n\nconst colorOptions = [\n  { value: \"default\", label: \"Gray\", color: \"#888888\" },\n  { value: \"blue\", label: \"Blue\", color: \"#0097f0\" },\n  { value: \"orange\", label: \"Orange\", color: \"#e64c00\" },\n  { value: \"magenta\", label: \"Magenta\", color: \"#f731ed\" },\n  { value: \"lightgreen\", label: \"Light Green\", color: \"#d2d900\" },\n  { value: \"turquoise\", label: \"Turquoise\", color: \"#01c6bd\" },\n  { value: \"lightblue\", label: \"Light Blue\", color: \"#64cbfa\" },\n  { value: \"green\", label: \"Green\", color: \"#01ac3c\" }\n];\n\nconst dot = (color = \"#ccc\") => ({\n  alignItems: \"center\",\n  display: \"flex\",\n\n  \":before\": {\n    backgroundColor: color,\n    borderRadius: 10,\n    content: '\" \"',\n    display: \"block\",\n    marginRight: 8,\n    height: 10,\n    width: 10\n  }\n});\n\nconst colorStyles = {\n  control: styles => ({\n    ...styles,\n    backgroundColor: \"transparent\",\n    borderColor: \"#333\",\n    marginRight: \"20px\"\n  }),\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    const color = chroma(data.color);\n    return {\n      ...styles,\n      backgroundColor: isDisabled\n        ? null\n        : isSelected\n        ? data.color\n        : isFocused\n        ? color.alpha(0.1).css()\n        : null,\n      color: isDisabled\n        ? \"#ccc\"\n        : isSelected\n        ? chroma.contrast(color, \"white\") > 2\n          ? \"white\"\n          : \"black\"\n        : data.color,\n      cursor: isDisabled ? \"not-allowed\" : \"default\",\n\n      \":active\": {\n        ...styles[\":active\"],\n        backgroundColor:\n          !isDisabled && (isSelected ? data.color : color.alpha(0.3).css())\n      }\n    };\n  },\n  input: styles => ({ ...styles, ...dot() }),\n  placeholder: styles => ({ ...styles, ...dot() }),\n  singleValue: (styles, { data }) => ({\n    ...styles,\n    ...dot(data.color),\n    color: \"white\"\n  }),\n  indicatorSeparator: styles => ({ ...styles, backgroundColor: \"#333\" }),\n  dropdownIndicator: styles => ({ ...styles, color: \"white\" })\n};\n\nclass ButtonColorSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: null\n    };\n    this.revert = this.revert.bind(this);\n  }\n\n  handleChange = selectedOption => {\n    this.props.changeButtonColor(selectedOption.value);\n  };\n\n  revert() {\n    const { changeButtonColor, originalColor } = this.props;\n    changeButtonColor(originalColor);\n  }\n\n  render() {\n    const { color, originalColor } = this.props;\n\n    return (\n      <div id=\"button-color-select-wrapper\">\n        <div className=\"option-title\">\n          <label>Button Color</label>\n\n          {originalColor !== color && (\n            <Tooltip\n              animation=\"shift\"\n              duration={100}\n              animateFill={false}\n              hideOnClick={false}\n              title={\"Revert to \" + originalColor}\n              position=\"bottom\"\n              theme=\"dark\"\n            >\n              <div className=\"revert-button\" onClick={this.revert}>\n                <i className=\"icon ion-ios-undo\" />\n                <span>Revert</span>\n              </div>\n            </Tooltip>\n          )}\n        </div>\n        <Select\n          value={colorOptions.find(c => c.value === color)}\n          onChange={this.handleChange}\n          label=\"Single select\"\n          options={colorOptions}\n          styles={colorStyles}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ButtonColorSelect;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tooltip } from \"react-tippy\";\nimport \"react-tippy/dist/tippy.css\";\nimport audioSrcData from \"../data/audio-src\";\nimport ButtonColorSelect from \"./ButtonColorSelect\";\nimport { closeButtonEditSidebar } from \"../actions\";\nimport { changeButtonColor, changeButtonSound } from \"../actions\";\n\nconst classnames = require(\"classnames\");\n\nclass PadButtonEditBox extends Component {\n  constructor(props) {\n    super(props);\n    this.changeButtonColor = this.changeButtonColor.bind(this);\n    this.handleAudioSrcSelect = this.handleAudioSrcSelect.bind(this);\n    this.revertAudioSrc = this.revertAudioSrc.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  changeButtonColor(newColor) {\n    const { dispatchChangeButtonColor, padButtonEdit } = this.props;\n    dispatchChangeButtonColor(padButtonEdit.btnIdx, newColor);\n  }\n\n  handleAudioSrcSelect(srcName) {\n    const { dispatchChangeButtonSound, padButtonEdit } = this.props;\n\n    const src = audioSrcData[srcName];\n\n    dispatchChangeButtonSound(padButtonEdit.btnIdx, srcName);\n\n    const audio = new Audio(src);\n    audio.volume = this.props.volume;\n    audio.play();\n  }\n\n  revertAudioSrc() {\n    const { dispatchChangeButtonSound, padButtonEdit } = this.props;\n\n    dispatchChangeButtonSound(padButtonEdit.btnIdx, padButtonEdit.srcName);\n  }\n\n  close() {\n    const { dispatchCloseButtonEditSidebar } = this.props;\n\n    dispatchCloseButtonEditSidebar();\n  }\n\n  render() {\n    const { pads, padButtonEdit } = this.props;\n\n    if (padButtonEdit === null) return null;\n\n    const { btnIdx } = padButtonEdit;\n    const originalColor = padButtonEdit.color;\n    const originalSrcName = padButtonEdit.srcName;\n\n    return (\n      <div id=\"pad-button-edit-box\">\n        <ButtonColorSelect\n          color={pads[btnIdx].color}\n          originalColor={originalColor}\n          changeButtonColor={this.changeButtonColor}\n        />\n\n        <div className=\"option-title\">\n          <label>Audio Source</label>\n\n          {originalSrcName !== pads[btnIdx].srcName && (\n            <div className=\"revert-button\" onClick={this.revertAudioSrc}>\n              <Tooltip\n                animation=\"shift\"\n                duration={100}\n                animateFill={false}\n                hideOnClick={false}\n                title={\"Revert to \" + originalSrcName}\n                position=\"bottom\"\n                theme=\"dark\"\n              >\n                <i className=\"icon ion-ios-undo\" />\n                <span>Revert</span>\n              </Tooltip>\n            </div>\n          )}\n        </div>\n        <div id=\"audio-src-items\">\n          {Object.keys(audioSrcData).map(k => {\n            const itemClassStr = classnames({\n              item: true,\n              selected: k === pads[btnIdx].srcName\n            });\n\n            return (\n              <div\n                key={k}\n                className={itemClassStr}\n                onClick={e => {\n                  this.handleAudioSrcSelect(k);\n                }}\n              >\n                <span>{k}</span>\n\n                <div className=\"show-when-selected\">\n                  <i className=\"icon ion-md-checkmark\" />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        <div id=\"action-buttons-wrapper\">\n          <button className=\"close-button\" onClick={this.close}>\n            <i className=\"icon ion-md-close\" />\n            Close\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  pads: state.pads,\n  volume: state.volume,\n  padButtonEdit: state.padButtonEdit\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchChangeButtonColor: (btnIdx, color) =>\n    dispatch(changeButtonColor(btnIdx, color)),\n  dispatchChangeButtonSound: (btnIdx, srcName) =>\n    dispatch(changeButtonSound(btnIdx, srcName)),\n  dispatchCloseButtonEditSidebar: () => dispatch(closeButtonEditSidebar())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PadButtonEditBox);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport MidiControls from \"./MidiControls\";\nimport MidiPads from \"./MidiPads\";\nimport PadButtonEditBox from \"./PadButtonEditBox\";\nimport { CSSTransition } from \"react-transition-group\";\n\nclass App extends Component {\n  render() {\n    const { padButtonEdit } = this.props;\n\n    const isEditMode = padButtonEdit !== null;\n\n    return (\n      <div id=\"app\" onMouseUp={() => { window.onHold = false; }}>\n        <div id=\"midi-pad\">\n          <MidiControls />\n          <MidiPads />\n        </div>\n\n        <CSSTransition\n          in={isEditMode}\n          timeout={300}\n          classNames=\"edit-sidebar\"\n          unmountOnExit\n        >\n          <PadButtonEditBox />\n        </CSSTransition>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  padButtonEdit: state.padButtonEdit\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import padMappings from \"../data/pad-mappings\";\nimport PersistentStorage from \"../data/PersistentStorage\";\nimport {\n  CHANGE_BUTTON_COLOR,\n  CHANGE_BUTTON_SOUND,\n  RESET_ALL\n} from \"../actions\";\nconst _ = require(\"lodash\");\n\nconst initialState = PersistentStorage.loadPadMappings();\nconst originalState = _.cloneDeep(padMappings);\n\nfunction pads(state = initialState, action) {\n  let clonedState;\n\n  switch (action.type) {\n    case CHANGE_BUTTON_COLOR:\n      clonedState = _.clone(state);\n      clonedState[action.payload.btnIdx].color = action.payload.color;\n\n      return clonedState;\n    case CHANGE_BUTTON_SOUND:\n      clonedState = _.clone(state);\n      clonedState[action.payload.btnIdx].srcName = action.payload.srcName;\n\n      return clonedState;\n    case RESET_ALL:\n      return originalState;\n    default:\n      return state;\n  }\n}\n\nexport default pads;\n","import audioSrcData from \"../data/audio-src\";\n\nconst initialState = audioSrcData;\n\nfunction audioSource(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nexport default audioSource;\n","import { CHANGE_VOLUME } from \"../actions\";\nimport PersistentStorage from \"../data/PersistentStorage\";\n\nconst initialState = PersistentStorage.loadVolume();\n\nfunction volume(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_VOLUME:\n      return action.payload.volume;\n    default:\n      return state;\n  }\n}\n\nexport default volume;\n","import {\n  OPEN_BUTTON_EDIT_SIDEBAR,\n  CLOSE_BUTTON_EDIT_SIDEBAR\n} from \"../actions\";\n\nconst initialState = null;\n\nfunction padButtonEdit(state = initialState, action) {\n  switch (action.type) {\n    case OPEN_BUTTON_EDIT_SIDEBAR:\n      return action.payload;\n\n    case CLOSE_BUTTON_EDIT_SIDEBAR:\n      return initialState;\n\n    default:\n      return state;\n  }\n}\n\nexport default padButtonEdit;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport PersistentStorage from \"./data/PersistentStorage\";\n\nimport App from \"./components/App\";\nimport store from \"./store\";\n\nimport \"reset-css\";\nimport \"./stylesheets/style.scss\";\n\nlet currentVolume, currentPads;\n\nfunction handleChange() {\n  let previousVolume = currentVolume;\n  currentVolume = store.getState().volume;\n\n  console.log(\"previousVolume=\" + previousVolume);\n  console.log(\"currentValue=\" + currentVolume);\n\n  let previousPads = currentPads;\n  currentPads = store.getState().pads;\n\n  if (previousVolume !== currentVolume) {\n    PersistentStorage.saveVolume(currentVolume);\n  }\n\n  if (previousPads !== currentPads) {\n    PersistentStorage.savePadMappings(currentPads);\n  }\n}\n\nconst unsubscribe = store.subscribe(handleChange);\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n","import { combineReducers } from \"redux\";\nimport pads from \"./pads\";\nimport audioSource from \"./audioSource\";\nimport volume from \"./volume\";\nimport padButtonEdit from \"./padButtonEdit\";\n\nconst rootReducer = combineReducers({\n  pads,\n  audioSource,\n  volume,\n  padButtonEdit\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n"],"sourceRoot":""}